),
ct = nchar(password),
good = ((ct >= min) & (ct <= max))
) %>%
count(good)
input %>%
stri_match_first_regex(
"([^-]+)-([^ ]+) ([^:]+): (.*)$"
) %>%
.[,2:5] %>%
as.data.frame() %>%
set_names(c("min", "max", "letter", "password")) %>%
mutate(
password = stri_replace_all_regex(
password,
sprintf("[^%s]", letter),
""
)
input <- read_lines("/tmp/test.txt")
input %>%
stri_match_first_regex(
"([^-]+)-([^ ]+) ([^:]+): (.*)$"
) %>%
.[,2:5] %>%
as.data.frame() %>%
set_names(c("min", "max", "letter", "password")) %>%
mutate(
password = stri_replace_all_regex(
password,
sprintf("[^%s]", letter),
""
)
input %>%
stri_match_first_regex(
"([^-]+)-([^ ]+) ([^:]+): (.*)$"
) %>%
.[,2:5] %>%
as.data.frame() %>%
set_names(c("min", "max", "letter", "password")) %>%
mutate(
password = stri_replace_all_regex(
password,
sprintf("[^%s]", letter),
""
),
ct = nchar(password)
)
input %>%
stri_match_first_regex(
"([^-]+)-([^ ]+) ([^:]+): (.*)$"
) %>%
.[,2:5] %>%
as.data.frame() %>%
set_names(c("min", "max", "letter", "password")) %>%
mutate(
password = stri_replace_all_regex(
password,
sprintf("[^%s]", letter),
""
),
ct = nchar(password),
good = ((ct >= min) & (ct <= max))
)
input %>%
stri_match_first_regex(
"([^-]+)-([^ ]+) ([^:]+): (.*)$"
) %>%
.[,2:5] %>%
as.data.frame() %>%
set_names(c("min", "max", "letter", "password")) %>%
mutate(
password = stri_replace_all_regex(
password,
sprintf("[^%s]", letter),
""
),
ct = nchar(password),
good = ((ct >= min) & (ct <= max))
) %>%
count(good)
input %>%
stri_match_first_regex(
"([^-]+)-([^ ]+) ([^:]+): (.*)$"
) %>%
.[,2:5] %>%
as.data.frame() %>%
set_names(c("min", "max", "letter", "password")) %>%
as_tibble()
input %>%
stri_match_first_regex(
"([^-]+)-([^ ]+) ([^:]+): (.*)$"
) %>%
.[,2:5] %>%
as.data.frame() %>%
set_names(c("min", "max", "letter", "password")) %>%
mutate(
min = as.integer(min),
max = as.integer(max),
password = stri_replace_all_regex(
password,
sprintf("[^%s]", letter),
""
),
ct = nchar(password),
good = ((ct >= min) & (ct <= max))
) %>%
count(good)
input <- read_lines("../input/02-01.txt")
input %>%
stri_match_first_regex(
"([^-]+)-([^ ]+) ([^:]+): (.*)$"
) %>%
.[,2:5] %>%
as.data.frame() %>%
set_names(c("min", "max", "letter", "password")) %>%
mutate(
min = as.integer(min),
max = as.integer(max),
password = stri_replace_all_regex(
password,
sprintf("[^%s]", letter),
""
),
ct = nchar(password),
good = ((ct >= min) & (ct <= max))
) %>%
count(good)
input %>%
stri_match_first_regex(
"([^-]+)-([^ ]+) ([^:]+): (.*)$"
) %>%
.[,2:5] %>%
as.data.frame() %>%
set_names(c("min", "max", "letter", "password")) %>%
mutate(
pos1 = as.integer(min),
pos2 = as.integer(max)
)
input <- read_lines("/tmp/test.txt")
input %>%
stri_match_first_regex(
"([^-]+)-([^ ]+) ([^:]+): (.*)$"
) %>%
.[,2:5] %>%
as.data.frame() %>%
set_names(c("min", "max", "letter", "password")) %>%
mutate(
pos1 = as.integer(min),
pos2 = as.integer(max),
)
?substr
input %>%
stri_match_first_regex(
"([^-]+)-([^ ]+) ([^:]+): (.*)$"
) %>%
.[,2:5] %>%
as.data.frame() %>%
set_names(c("pos1", "pos1", "letter", "password")) %>%
mutate(
pos1 = as.integer(pos1),
pos2 = as.integer(pos2),
good = substr(password, pos1, pos1) != substr(password, pos2, pos2)
)
input %>%
stri_match_first_regex(
"([^-]+)-([^ ]+) ([^:]+): (.*)$"
) %>%
.[,2:5] %>%
as.data.frame() %>%
set_names(c("pos1", "pos2", "letter", "password")) %>%
mutate(
pos1 = as.integer(pos1),
pos2 = as.integer(pos2),
good = substr(password, pos1, pos1) != substr(password, pos2, pos2)
)
input %>%
stri_match_first_regex(
"([^-]+)-([^ ]+) ([^:]+): (.*)$"
) %>%
.[,2:5] %>%
as.data.frame() %>%
set_names(c("pos1", "pos2", "letter", "password")) %>%
mutate(
pos1 = as.integer(pos1),
pos2 = as.integer(pos2),
good = (substr(password, pos1, pos1) == letter) & (substr(password, pos2, pos2) == letter)
)
input %>%
stri_match_first_regex(
"([^-]+)-([^ ]+) ([^:]+): (.*)$"
) %>%
.[,2:5] %>%
as.data.frame() %>%
set_names(c("pos1", "pos2", "letter", "password")) %>%
mutate(
pos1 = as.integer(pos1),
pos2 = as.integer(pos2),
password = map(password, strsplit)
)
input %>%
stri_match_first_regex(
"([^-]+)-([^ ]+) ([^:]+): (.*)$"
) %>%
.[,2:5] %>%
as.data.frame() %>%
set_names(c("pos1", "pos2", "letter", "password")) %>%
mutate(
pos1 = as.integer(pos1),
pos2 = as.integer(pos2),
password = map(password, strsplit, "")
)
input %>%
stri_match_first_regex(
"([^-]+)-([^ ]+) ([^:]+): (.*)$"
) %>%
.[,2:5] %>%
as.data.frame() %>%
set_names(c("pos1", "pos2", "letter", "password")) %>%
mutate(
pos1 = as.integer(pos1),
pos2 = as.integer(pos2),
password = map(password, strsplit, "")
) %>%
as_tibble()
input %>%
stri_match_first_regex(
"([^-]+)-([^ ]+) ([^:]+): (.*)$"
) %>%
.[,2:5] %>%
as.data.frame() %>%
set_names(c("pos1", "pos2", "letter", "password")) %>%
mutate(
pos1 = as.integer(pos1),
pos2 = as.integer(pos2),
password = map(password, strsplit, "") %>% map2(pos1, pos2, ~.[c(.x, .y)])
)
input %>%
stri_match_first_regex(
"([^-]+)-([^ ]+) ([^:]+): (.*)$"
) %>%
.[,2:5] %>%
as.data.frame() %>%
set_names(c("pos1", "pos2", "letter", "password")) %>%
mutate(
pos1 = as.integer(pos1),
pos2 = as.integer(pos2),
password = map(password, strsplit, "") %>% map2(pos1, pos2, ~.[c(.x, .y)])
)
input %>%
stri_match_first_regex(
"([^-]+)-([^ ]+) ([^:]+): (.*)$"
) %>%
.[,2:5] %>%
as.data.frame() %>%
set_names(c("pos1", "pos2", "letter", "password")) %>%
mutate(
pos1 = as.integer(pos1),
pos2 = as.integer(pos2),
password = map(password, strsplit, "")
)
input %>%
stri_match_first_regex(
"([^-]+)-([^ ]+) ([^:]+): (.*)$"
) %>%
.[,2:5] %>%
as.data.frame() %>%
set_names(c("pos1", "pos2", "letter", "password")) %>%
mutate(
pos1 = as.integer(pos1),
pos2 = as.integer(pos2),
password = map(password, strsplit, "")[,c(pos1, pos2)]
)
input %>%
stri_match_first_regex(
"([^-]+)-([^ ]+) ([^:]+): (.*)$"
) %>%
.[,2:5] %>%
as.data.frame() %>%
set_names(c("pos1", "pos2", "letter", "password")) %>%
mutate(
pos1 = as.integer(pos1),
pos2 = as.integer(pos2),
password = map(password, strsplit, "")
)
input %>%
stri_match_first_regex(
"([^-]+)-([^ ]+) ([^:]+): (.*)$"
) %>%
.[,2:5] %>%
as.data.frame() %>%
set_names(c("pos1", "pos2", "letter", "password")) %>%
mutate(
pos1 = as.integer(pos1),
pos2 = as.integer(pos2),
chr1 = substr(password, pos1, pos1),
chr2 = substr(password, pos1, pos2)
)
input %>%
stri_match_first_regex(
"([^-]+)-([^ ]+) ([^:]+): (.*)$"
) %>%
.[,2:5] %>%
as.data.frame() %>%
set_names(c("pos1", "pos2", "letter", "password")) %>%
mutate(
pos1 = as.integer(pos1),
pos2 = as.integer(pos2),
chr1 = substr(password, pos1, pos1),
chr2 = substr(password, pos2, pos2)
)
input %>%
stri_match_first_regex(
"([^-]+)-([^ ]+) ([^:]+): (.*)$"
) %>%
.[,2:5] %>%
as.data.frame() %>%
set_names(c("pos1", "pos2", "letter", "password")) %>%
mutate(
pos1 = as.integer(pos1),
pos2 = as.integer(pos2),
chr1 = substr(password, pos1, pos1),
chr2 = substr(password, pos2, pos2),
has_chr = letter %in% c(chr1, chr2)
)
input %>%
stri_match_first_regex(
"([^-]+)-([^ ]+) ([^:]+): (.*)$"
) %>%
.[,2:5] %>%
as.data.frame() %>%
set_names(c("pos1", "pos2", "letter", "password")) %>%
mutate(
pos1 = as.integer(pos1),
pos2 = as.integer(pos2),
chr1 = substr(password, pos1, pos1),
chr2 = substr(password, pos2, pos2)
)
input %>%
stri_match_first_regex(
"([^-]+)-([^ ]+) ([^:]+): (.*)$"
) %>%
.[,2:5] %>%
as.data.frame() %>%
set_names(c("pos1", "pos2", "letter", "password")) %>%
mutate(
pos1 = as.integer(pos1),
pos2 = as.integer(pos2),
chr1 = substr(password, pos1, pos1),
chr2 = substr(password, pos2, pos2),
has_chr = (chr1 == letter) | (chr2 == letter)
)
input %>%
stri_match_first_regex(
"([^-]+)-([^ ]+) ([^:]+): (.*)$"
) %>%
.[,2:5] %>%
as.data.frame() %>%
set_names(c("pos1", "pos2", "letter", "password")) %>%
mutate(
pos1 = as.integer(pos1),
pos2 = as.integer(pos2),
chr1 = substr(password, pos1, pos1),
chr2 = substr(password, pos2, pos2),
good = ((chr1 == letter) | (chr2 == letter)) & (!(chr1 == chr2))
)
input %>%
stri_match_first_regex(
"([^-]+)-([^ ]+) ([^:]+): (.*)$"
) %>%
.[,2:5] %>%
as.data.frame() %>%
set_names(c("pos1", "pos2", "letter", "password")) %>%
mutate(
pos1 = as.integer(pos1),
pos2 = as.integer(pos2),
chr1 = substr(password, pos1, pos1),
chr2 = substr(password, pos2, pos2),
good = ((chr1 == letter) | (chr2 == letter)) & (!(chr1 == chr2))
) %>%
count(good)
input <- read_lines("../input/02-01.txt")
input %>%
stri_match_first_regex(
"([^-]+)-([^ ]+) ([^:]+): (.*)$"
) %>%
.[,2:5] %>%
as.data.frame() %>%
set_names(c("pos1", "pos2", "letter", "password")) %>%
mutate(
pos1 = as.integer(pos1),
pos2 = as.integer(pos2),
chr1 = substr(password, pos1, pos1),
chr2 = substr(password, pos2, pos2),
good = ((chr1 == letter) | (chr2 == letter)) & (!(chr1 == chr2))
) %>%
count(good)
reticulate::repl_python()
input %>%
stri_match_first_regex(
"([^-]+)-([^ ]+) ([^:]+): (.*)$"
)
input %>%
stri_match_first_regex(
"(?<pos1>[^-]+)-(?<pos2>[^ ]+) (?<letter>[^:]+): (?<password>.*)$"
) %>%
head()
input %>%
stri_extract_first_regex(
"(?<pos1>[^-]+)-(?<pos2>[^ ]+) (?<letter>[^:]+): (?<password>.*)$"
) %>%
head()
input %>%
stri_extract_all_regex(
"(?<pos1>[^-]+)-(?<pos2>[^ ]+) (?<letter>[^:]+): (?<password>.*)$"
) %>%
head()
input %>%
stri_match_all_regex(
"(?<pos1>[^-]+)-(?<pos2>[^ ]+) (?<letter>[^:]+): (?<password>.*)$"
) %>%
head()
input %>%
stri_match_first_regex(
"(?<pos1>[^-]+)-(?<pos2>[^ ]+) (?<letter>[^:]+): (?<password>.*)$"
) %>%
head()
install.packages("stringb")
library(stringb)
?stringb
input %>%
stringb::text_extract_group_all(
"(?<pos1>[^-]+)-(?<pos2>[^ ]+) (?<letter>[^:]+): (?<password>.*)$",
) %>%
head()
input %>%
stringb::text_extract_group_all(
"(?<pos1>[^-]+)-(?<pos2>[^ ]+) (?<letter>[^:]+): (?<password>.*)$"
) %>%
head()
?stringb::text_extract_group_all
input %>%
?stringb::text_extract_group_all(
"(?<pos1>[^-]+)-(?<pos2>[^ ]+) (?<letter>[^:]+): (?<password>.*)$",
perl = TRUE
) %>%
head()
input %>%
stringb::text_extract_group_all(
"(?<pos1>[^-]+)-(?<pos2>[^ ]+) (?<letter>[^:]+): (?<password>.*)$",
perl = TRUE
) %>%
head()
input %>%
stringb::text_extract_group_all(
"(?<pos1>[^-]+)",
perl = TRUE
) %>%
head()
regexpr(
"(?<pos1>[^-]+)-(?<pos2>[^ ]+) (?<letter>[^:]+): (?<password>.*)$",
input,
perl = TRUE
) %>%
head()
regexpr(
"(?<pos1>[^-]+)-(?<pos2>[^ ]+) (?<letter>[^:]+): (?<password>.*)$",
input,
perl = TRUE
)
?stringb::as.data.frame
text_extract_group_all(
input,
"(?<pos1>[^-]+)-(?<pos2>[^ ]+) (?<letter>[^:]+): (?<password>.*)$",
perl = TRUE
)
text_extract_group_all
stringb:::text_extract_group_all.default
reticulate::repl_python()
input <- read_lines("../input/02-01.txt")
input %>%
stri_match_first_regex(
"([^-]+)-([^ ]+) ([^:]+): (.*)$"
) %>%
.[,2:5] %>%
as.data.frame() %>%
set_names(c("pos1", "pos2", "letter", "password")) %>%
mutate(
pos1 = as.integer(pos1),
pos2 = as.integer(pos2),
chr1 = substr(password, pos1, pos1),
chr2 = substr(password, pos2, pos2),
good = ((chr1 == letter) | (chr2 == letter)) & (!(chr1 == chr2))
) %>%
count(good)
reticulate::repl_python()
input <- read_lines("../input/02-01.txt")
input %>%
stri_match_first_regex(
"([^-]+)-([^ ]+) ([^:]+): (.*)$"
) %>%
.[,2:5] %>%
as.data.frame() %>%
set_names(c("min", "max", "letter", "password")) %>%
mutate(
min = as.integer(min),
max = as.integer(max),
password = stri_replace_all_regex(password, sprintf("[^%s]", letter), ""),
ct = nchar(password),
good = ((ct >= min) & (ct <= max))
) %>%
count(good)
reticulate::repl_python()
