m_cols <- length(orig_map[[1]])
m_rows <- length(orig_map)
slope_x <- 3
slope_y <- 1
n_tiles <- slope_x * m_rows %/% m_cols
orig_map %>%
map(~rep(., n_tiles)) -> actual_map
start <- 1
xpos <- 1
ypos <- 1
n_trees <- 0
repeat {
xpos <- xpos + slope_x
row_trees <- sum(actual_map[[ypos]][start:(xpos-1)] == "#", na.rm = TRUE)
print(row_trees)
n_trees = n_trees + row_trees
start <- xpos
ypos <- ypos + 1
if (ypos > m_rows) break
}
n_trees
readLines("/tmp/test.txt") %>%
# readLines("../input/03-01.txt") %>%
stri_split_boundaries(
opts_brkiter = stri_opts_brkiter("character"),
simplify = FALSE
) -> orig_map
m_cols <- length(orig_map[[1]])
m_rows <- length(orig_map)
slope_x <- 3
slope_y <- 1
n_tiles <- slope_x * m_rows %/% m_cols
orig_map %>%
map(~rep(., n_tiles)) -> actual_map
start <- 1
xpos <- 1
ypos <- 1
n_trees <- 0
repeat {
xpos <- xpos + slope_x
row_trees <- sum(actual_map[[ypos]][(start+1):xpos] == "#", na.rm = TRUE)
print(row_trees)
n_trees = n_trees + row_trees
start <- xpos
ypos <- ypos + 1
if (ypos > m_rows) break
}
n_trees
actual_map
actual_map %>%
actual_map %>% map_chr(paste0, collapse="")
actual_map %>% map_chr(paste0, collapse="") %>% cat(sep="\n")
readLines("/tmp/test.txt") %>%
# readLines("../input/03-01.txt") %>%
stri_split_boundaries(
opts_brkiter = stri_opts_brkiter("character"),
simplify = FALSE
) -> orig_map
m_cols <- length(orig_map[[1]])
m_rows <- length(orig_map)
slope_x <- 3
slope_y <- 1
n_tiles <- slope_x * m_rows %/% m_cols
orig_map %>%
map(~rep(., n_tiles)) -> actual_map
actual_map
xpos <- 1
ypos <- 1
n_trees <- 0
repeat {
xpos <- xpos + slope_x
row_trees <- sum(actual_map[[ypos]][start:xpos] == "#", na.rm = TRUE)
print(row_trees)
n_trees = n_trees + row_trees
start <- xpos
ypos <- ypos + 1
if (ypos > m_rows) break
}
n_trees
readLines("/tmp/test.txt") %>%
# readLines("../input/03-01.txt") %>%
stri_split_boundaries(
opts_brkiter = stri_opts_brkiter("character"),
simplify = FALSE
) -> orig_map
m_cols <- length(orig_map[[1]])
m_rows <- length(orig_map)
slope_x <- 3
slope_y <- 1
n_tiles <- slope_x * m_rows %/% m_cols
orig_map %>%
map(~rep(., n_tiles)) -> actual_map
start <- 1
xpos <- 1
ypos <- 1
n_trees <- 0
repeat {
xpos <- xpos + slope_x
if (actual_map[[ypos]][xpos] == "#") n_trees <- n_trees + 1
start <- xpos
ypos <- ypos + 1
if (ypos > m_rows) break
}
n_trees
readLines("/tmp/test.txt") %>%
# readLines("../input/03-01.txt") %>%
stri_split_boundaries(
opts_brkiter = stri_opts_brkiter("character"),
simplify = FALSE
) -> orig_map
m_cols <- length(orig_map[[1]])
m_rows <- length(orig_map)
slope_x <- 3
slope_y <- 1
n_tiles <- slope_x * m_rows %/% m_cols
orig_map %>%
map(~rep(., n_tiles)) -> actual_map
xpos <- 1
ypos <- 1
n_trees <- 0
repeat {
xpos <- xpos + slope_x
if (actual_map[[ypos]][xpos] == "#") n_trees <- n_trees + 1
ypos <- ypos + 1
if (ypos > m_rows) break
}
actual_map[[1]][4]
readLines("/tmp/test.txt") %>%
# readLines("../input/03-01.txt") %>%
stri_split_boundaries(
opts_brkiter = stri_opts_brkiter("character"),
simplify = FALSE
) -> orig_map
m_cols <- length(orig_map[[1]])
m_rows <- length(orig_map)
slope_x <- 3
slope_y <- 1
n_tiles <- slope_x * m_rows %/% m_cols
orig_map %>%
map(~rep(., n_tiles)) -> actual_map
xpos <- 1
ypos <- 1
n_trees <- 0
repeat {
xpos <- xpos + slope_x
ypos <- ypos + 1
if (ypos > m_rows) break
if (actual_map[[ypos]][xpos] == "#") n_trees <- n_trees + 1
}
n_trees
# readLines("/tmp/test.txt") %>%
readLines("../input/03-01.txt") %>%
stri_split_boundaries(
opts_brkiter = stri_opts_brkiter("character"),
simplify = FALSE
) -> orig_map
m_cols <- length(orig_map[[1]])
m_rows <- length(orig_map)
slope_x <- 3
slope_y <- 1
n_tiles <- slope_x * m_rows %/% m_cols
orig_map %>%
map(~rep(., n_tiles)) -> actual_map
xpos <- 1
ypos <- 1
n_trees <- 0
repeat {
xpos <- xpos + slope_x
ypos <- ypos + 1
if (ypos > m_rows) break
if (actual_map[[ypos]][xpos] == "#") n_trees <- n_trees + 1
}
# readLines("/tmp/test.txt") %>%
readLines("../input/03-01.txt") %>%
stri_split_boundaries(
opts_brkiter = stri_opts_brkiter("character"),
simplify = FALSE
) -> orig_map
m_cols <- length(orig_map[[1]])
m_rows <- length(orig_map)
slope_x <- 3
slope_y <- 1
n_tiles <- slope_x * m_rows %/% m_cols
orig_map %>%
map(~rep(., n_tiles)) -> actual_map
xpos <- 1
ypos <- 1
n_trees <- 0
# readLines("/tmp/test.txt") %>%
readLines("../input/03-01.txt") %>%
stri_split_boundaries(
opts_brkiter = stri_opts_brkiter("character"),
simplify = FALSE
) -> orig_map
m_cols <- length(orig_map[[1]])
m_rows <- length(orig_map)
slope_x <- 3
slope_y <- 1
n_tiles <- slope_x * m_rows %/% m_cols
orig_map %>%
map(~rep(., n_tiles)) -> actual_map
actual_map
xpos <- 1
ypos <- 1
n_trees <- 0
repeat {
xpos <- xpos + slope_x
ypos <- ypos + 1
if (ypos > m_rows) break
print(sprintf("X: %02d; Y: %02d; CHR: %s", xpos, ypos, actual_map[[ypos]][xpos]))
if (actual_map[[ypos]][xpos] == "#") n_trees <- n_trees + 1
}
m_rows
# readLines("/tmp/test.txt") %>%
readLines("../input/03-01.txt") %>%
stri_split_boundaries(
opts_brkiter = stri_opts_brkiter("character"),
simplify = FALSE
) -> orig_map
m_cols <- length(orig_map[[1]])
m_rows <- length(orig_map)
slope_x <- 3
slope_y <- 1
n_tiles <- slope_x * m_rows %/% (m_cols+1)
orig_map %>%
map(~rep(., n_tiles)) -> actual_map
xpos <- 1
ypos <- 1
n_trees <- 0
repeat {
xpos <- xpos + slope_x
ypos <- ypos + 1
if (ypos > m_rows) break
print(sprintf("X: %02d; Y: %02d; CHR: %s", xpos, ypos, actual_map[[ypos]][xpos]))
if (actual_map[[ypos]][xpos] == "#") n_trees <- n_trees + 1
}
n_trees
length(actual_map[[1]])
# readLines("/tmp/test.txt") %>%
readLines("../input/03-01.txt") %>%
stri_split_boundaries(
opts_brkiter = stri_opts_brkiter("character"),
simplify = FALSE
) -> orig_map
m_cols <- length(orig_map[[1]])
m_rows <- length(orig_map)
slope_x <- 3
slope_y <- 1
n_tiles <- (slope_x+1) * m_rows %/% (m_cols)
orig_map %>%
map(~rep(., n_tiles)) -> actual_map
xpos <- 1
ypos <- 1
n_trees <- 0
repeat {
xpos <- xpos + slope_x
ypos <- ypos + 1
if (ypos > m_rows) break
print(sprintf("X: %02d; Y: %02d; CHR: %s", xpos, ypos, actual_map[[ypos]][xpos]))
if (actual_map[[ypos]][xpos] == "#") n_trees <- n_trees + 1
}
n_trees
readLines("/tmp/test.txt") %>%
# readLines("../input/03-01.txt") %>%
stri_split_boundaries(
opts_brkiter = stri_opts_brkiter("character"),
simplify = FALSE
) -> orig_map
m_cols <- length(orig_map[[1]])
m_rows <- length(orig_map)
slope_x <- 3
slope_y <- 1
n_tiles <- (slope_x+1) * m_rows %/% (m_cols)
orig_map %>%
map(~rep(., n_tiles)) -> actual_map
xpos <- 1
ypos <- 1
n_trees <- 0
repeat {
xpos <- xpos + slope_x
ypos <- ypos + 1
if (ypos > m_rows) break
print(sprintf("X: %02d; Y: %02d; CHR: %s", xpos, ypos, actual_map[[ypos]][xpos]))
if (actual_map[[ypos]][xpos] == "#") n_trees <- n_trees + 1
}
n_trees
tree_count <- function(orig_map, slope_x, slope_y) {
m_cols <- length(orig_map[[1]])
m_rows <- length(orig_map)
n_tiles <- (slope_x+1) * m_rows %/% (m_cols)
orig_map %>%
map(~rep(., n_tiles)) -> actual_map
xpos <- 1
ypos <- 1
n_trees <- 0
repeat {
xpos <- xpos + slope_x
ypos <- ypos + 1
if (ypos > m_rows) break
print(sprintf("X: %02d; Y: %02d; CHR: %s", xpos, ypos, actual_map[[ypos]][xpos]))
if (actual_map[[ypos]][xpos] == "#") n_trees <- n_trees + 1
}
n_trees
}
readLines("/tmp/test.txt") %>%
# readLines("../input/03-01.txt") %>%
stri_split_boundaries(
opts_brkiter = stri_opts_brkiter("character"),
simplify = FALSE
) -> orig_map
tree_count <- function(orig_map, slope_x, slope_y) {
m_cols <- length(orig_map[[1]])
m_rows <- length(orig_map)
n_tiles <- (slope_x+1) * m_rows %/% (m_cols)
orig_map %>%
map(~rep(., n_tiles)) -> actual_map
xpos <- 1
ypos <- 1
n_trees <- 0
repeat {
xpos <- xpos + slope_x
ypos <- ypos + 1
if (ypos > m_rows) break
print(sprintf("X: %02d; Y: %02d; CHR: %s", xpos, ypos, actual_map[[ypos]][xpos]))
if (actual_map[[ypos]][xpos] == "#") n_trees <- n_trees + 1
}
n_trees
}
tree_count(orig_map, 3, 1)
# readLines("/tmp/test.txt") %>%
readLines("../input/03-01.txt") %>%
stri_split_boundaries(
opts_brkiter = stri_opts_brkiter("character"),
simplify = FALSE
) -> orig_map
tree_count <- function(orig_map, slope_x, slope_y) {
m_cols <- length(orig_map[[1]])
m_rows <- length(orig_map)
n_tiles <- (slope_x+1) * m_rows %/% (m_cols)
orig_map %>%
map(~rep(., n_tiles)) -> actual_map
xpos <- 1
ypos <- 1
n_trees <- 0
repeat {
xpos <- xpos + slope_x
ypos <- ypos + 1
if (ypos > m_rows) break
# print(sprintf("X: %02d; Y: %02d; CHR: %s", xpos, ypos, actual_map[[ypos]][xpos]))
if (actual_map[[ypos]][xpos] == "#") n_trees <- n_trees + 1
}
n_trees
}
tree_count(orig_map, 3, 1)
readLines("/tmp/test.txt") %>%
# readLines("../input/03-01.txt") %>%
stri_split_boundaries(
opts_brkiter = stri_opts_brkiter("character"),
simplify = FALSE
) -> orig_map
tree_count <- function(orig_map, slope_x, slope_y) {
m_cols <- length(orig_map[[1]])
m_rows <- length(orig_map)
n_tiles <- (slope_x+1) * m_rows %/% (m_cols)
orig_map %>%
map(~rep(., n_tiles)) -> actual_map
xpos <- 1
ypos <- 1
n_trees <- 0
repeat {
xpos <- xpos + slope_x
ypos <- ypos + 1
if (ypos > m_rows) break
# print(sprintf("X: %02d; Y: %02d; CHR: %s", xpos, ypos, actual_map[[ypos]][xpos]))
if (actual_map[[ypos]][xpos] == "#") n_trees <- n_trees + 1
}
n_trees
}
map2(x, y, tree_count, orig_map = orig_map)
x <- c(1, 3, 5, 7, 1)
y <- c(1, 1, 1, 1, 2)
map2(x, y, tree_count, orig_map = orig_map)
map2_int(x, y, tree_count, orig_map = orig_map) %>%
reduce(`*`)
map2_dbl(x, y, tree_count, orig_map = orig_map) %>%
reduce(`*`)
# readLines("/tmp/test.txt") %>%
readLines("../input/03-01.txt") %>%
stri_split_boundaries(
opts_brkiter = stri_opts_brkiter("character"),
simplify = FALSE
) -> orig_map
map2_dbl(x, y, tree_count, orig_map = orig_map) %>%
reduce(`*`)
x <- c(1, 3, 5, 7, 1)
y <- c(1, 1, 1, 1, 2)
# readLines("/tmp/test.txt") %>%
readLines("../input/03-01.txt") %>%
stri_split_boundaries(
opts_brkiter = stri_opts_brkiter("character"),
simplify = FALSE
) -> orig_map
tree_count <- function(orig_map, slope_x, slope_y) {
m_cols <- length(orig_map[[1]])
m_rows <- length(orig_map)
n_tiles <- (slope_x+1) * m_rows %/% (m_cols)
orig_map %>%
map(~rep(., n_tiles)) -> actual_map
xpos <- 1
ypos <- 1
n_trees <- 0
repeat {
xpos <- xpos + slope_x
ypos <- ypos + 1
if (ypos > m_rows) break
# print(sprintf("X: %02d; Y: %02d; CHR: %s", xpos, ypos, actual_map[[ypos]][xpos]))
if (actual_map[[ypos]][xpos] == "#") n_trees <- n_trees + 1
}
n_trees
}
tree_count <- function(orig_map, slope_x, slope_y) {
m_cols <- length(orig_map[[1]])
m_rows <- length(orig_map)
n_tiles <- (slope_x+1) * m_rows %/% (m_cols)
orig_map %>%
map(~rep(., n_tiles)) -> actual_map
xpos <- 1
ypos <- 1
n_trees <- 0
repeat {
xpos <- xpos + slope_x
ypos <- ypos + slope_y
if (ypos > m_rows) break
# print(sprintf("X: %02d; Y: %02d; CHR: %s", xpos, ypos, actual_map[[ypos]][xpos]))
if (actual_map[[ypos]][xpos] == "#") n_trees <- n_trees + 1
}
n_trees
}
readLines("/tmp/test.txt") %>%
# readLines("../input/03-01.txt") %>%
stri_split_boundaries(
opts_brkiter = stri_opts_brkiter("character"),
simplify = FALSE
) -> orig_map
tree_count <- function(orig_map, slope_x, slope_y) {
m_cols <- length(orig_map[[1]])
m_rows <- length(orig_map)
n_tiles <- (slope_x+1) * m_rows %/% (m_cols)
orig_map %>%
map(~rep(., n_tiles)) -> actual_map
xpos <- 1
ypos <- 1
n_trees <- 0
repeat {
xpos <- xpos + slope_x
ypos <- ypos + slope_y
if (ypos > m_rows) break
# print(sprintf("X: %02d; Y: %02d; CHR: %s", xpos, ypos, actual_map[[ypos]][xpos]))
if (actual_map[[ypos]][xpos] == "#") n_trees <- n_trees + 1
}
n_trees
}
tree_count(orig_map, 3, 1)
x <- c(1, 3, 5, 7, 1)
y <- c(1, 1, 1, 1, 2)
map2_dbl(x, y, tree_count, orig_map = orig_map) %>%
reduce(`*`)
# readLines("/tmp/test.txt") %>%
readLines("../input/03-01.txt") %>%
stri_split_boundaries(
opts_brkiter = stri_opts_brkiter("character"),
simplify = FALSE
) -> orig_map
x <- c(1, 3, 5, 7, 1)
y <- c(1, 1, 1, 1, 2)
map2_dbl(x, y, tree_count, orig_map = orig_map) %>%
reduce(`*`)
reticulate::repl_python()
x <- c(1, 3, 5, 7, 1)
y <- c(1, 1, 1, 1, 2)
map2_dbl(x, y, tree_count, orig_map = orig_map) %>%
reduce(`*`)
library(stringi)
library(tidyverse)
tree_count <- function(orig_map, slope_x, slope_y) {
m_cols <- length(orig_map[[1]])
m_rows <- length(orig_map)
n_tiles <- (slope_x+1) * m_rows %/% (m_cols)
orig_map %>%
map(~rep(., n_tiles)) -> actual_map
xpos <- 1
ypos <- 1
n_trees <- 0
repeat {
xpos <- xpos + slope_x
ypos <- ypos + slope_y
if (ypos > m_rows) break
if (actual_map[[ypos]][xpos] == "#") n_trees <- n_trees + 1
}
n_trees
}
tree_count(orig_map, 3, 1)
readLines("../input/03-01.txt") %>%
stri_split_boundaries(
opts_brkiter = stri_opts_brkiter("character"),
simplify = FALSE
) -> orig_map
x <- c(1, 3, 5, 7, 1)
y <- c(1, 1, 1, 1, 2)
map2_dbl(x, y, tree_count, orig_map = orig_map) %>%
reduce(`*`)
reticulate::repl_python()
