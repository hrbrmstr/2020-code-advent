map_dbl(~{
rng <- c(0, 127)
for (part in .x[1:7]) {
cat(rng[1], ", ", rng[2], "\n", sep="")
amt <- floor((rng[2] - rng[1])/2) + 1
if (part == "F") {
rng[2] <- rng[2] - amt
} else {
rng[1] <- rng[1] + amt
}
row <- if (.x[7] == "F") rng[1] else rng[2]
rng <- c(0, 7)
for (part in .x[8:10]) {
cat(rng[1], ", ", rng[2], "\n", sep="")
amt <- floor((rng[2] - rng[1])/2) + 1
if (part == "L") {
rng[2] <- rng[2] - amt
} else {
rng[1] <- rng[1] + amt
}
seat <- if (.x[10] == "R") rng[1] else rng[2]
(row * 8) + seat
}) %>%
sort() -> seats
max(seats)
seats
# input <- readLines("/tmp/test.txt")
input <- readLines("../input/05-01.txt")
strsplit(input, "") %>%
map_dbl(~{
rng <- c(0, 127)
for (part in .x[1:7]) {
amt <- floor((rng[2] - rng[1])/2) + 1
if (part == "F") {
rng[2] <- rng[2] - amt
} else {
rng[1] <- rng[1] + amt
}
row <- if (.x[7] == "F") rng[1] else rng[2]
rng <- c(0, 7)
for (part in .x[8:10]) {
amt <- floor((rng[2] - rng[1])/2) + 1
if (part == "L") {
rng[2] <- rng[2] - amt
} else {
rng[1] <- rng[1] + amt
}
seat <- if (.x[10] == "R") rng[1] else rng[2]
(row * 8) + seat
}) %>%
sort() -> seats
max(seats)
seats[which(diff(c(seats[1], seats)) > 1)]
seats[which(diff(c(seats[1], seats)) > 1)] - 1
reticulate::repl_python()
input <- readLines("/tmp/test.txt")
# input <- readLines("../input/05-01.txt")
strsplit(input, "") %>%
map_dbl(~{
rng <- c(0, 127)
for (part in .x[1:7]) {
message(str(rng))
amt <- floor((rng[2] - rng[1])/2) + 1
if (part == "F") {
rng[2] <- rng[2] - amt
} else {
rng[1] <- rng[1] + amt
}
row <- if (.x[7] == "F") rng[1] else rng[2]
rng <- c(0, 7)
for (part in .x[8:10]) {
message(str(rng))
amt <- floor((rng[2] - rng[1])/2) + 1
if (part == "L") {
rng[2] <- rng[2] - amt
} else {
rng[1] <- rng[1] + amt
}
seat <- if (.x[10] == "R") rng[1] else rng[2]
(row * 8) + seat
}) %>%
sort() -> seats
library(tidyverse)
input <- readLines("/tmp/test.txt")
strsplit(input, "") %>%
map_dbl(~{
rng <- c(0, 127)
for (part in .x[1:7]) {
message(str(rng))
amt <- floor((rng[2] - rng[1])/2) + 1
if (part == "F") {
rng[2] <- rng[2] - amt
} else {
rng[1] <- rng[1] + amt
}
row <- if (.x[7] == "F") rng[1] else rng[2]
rng <- c(0, 7)
for (part in .x[8:10]) {
message(str(rng))
amt <- floor((rng[2] - rng[1])/2) + 1
if (part == "L") {
rng[2] <- rng[2] - amt
} else {
rng[1] <- rng[1] + amt
}
seat <- if (.x[10] == "R") rng[1] else rng[2]
(row * 8) + seat
}) %>%
sort() -> seats
reticulate::repl_python()
library(tidyverse)
# input <- readLines("/tmp/test.txt")
input <- readLines("../input/05-01.txt")
strsplit(input, "") %>%
map_dbl(~{
rng <- c(0, 127)
for (part in .x[1:7]) {
amt <- floor((rng[2] - rng[1])/2) + 1
if (part == "F") {
rng[2] <- rng[2] - amt
} else {
rng[1] <- rng[1] + amt
}
row <- if (.x[7] == "F") rng[1] else rng[2]
rng <- c(0, 7)
for (part in .x[8:10]) {
amt <- floor((rng[2] - rng[1])/2) + 1
if (part == "L") {
rng[2] <- rng[2] - amt
} else {
rng[1] <- rng[1] + amt
}
seat <- if (.x[10] == "R") rng[1] else rng[2]
(row * 8) + seat
}) %>%
sort() -> seats
max(seats)
# --- Part Two ---
#
# Ding! The "fasten seat belt" signs have turned on. Time to find your seat.
#
# It's a completely full flight, so your seat should be the only missing
# boarding pass in your list. However, there's a catch: some of the seats at
# the very front and back of the plane don't exist on this aircraft, so they'll
# be missing from your list as well.
#
# Your seat wasn't at the very front or back, though; the seats with IDs +1
# and -1 from yours will be in your list.
#
# What is the ID of your seat?
seats[which(diff(c(seats[1], seats)) > 1)] - 1
reticulate::repl_python()
seats[which(diff(c(seats[1], seats)) > 1)] - 1
diff.default
seats[which(diff(c(seats[1], seats)) > 1)] - 1
letters[-1]
tail(letters, 1)
input <- readLines("../input/05-01.txt")
partition <- function(seq, lb, ub, trigger) {
for (part in seq) {
amt <- floor((ub - lb)/2) + 1
if (part == "F") {
ub <- ub - amt
} else {
lb <- lb + amt
}
return(if (tail(seq) == trigger) lb else ub)
}
strsplit(input, "") %>%
map_dbl(~{
return(
(partition(.x[1:7], 0, 127, "F") * 8) +
partition(.x[7:10], 0, 7, "L")
)
# rng <- c(0, 127)
#
# for (part in .x[1:7]) {
#   amt <- floor((rng[2] - rng[1])/2) + 1
#   if (part == "F") {
#     rng[2] <- rng[2] - amt
#   } else {
#     rng[1] <- rng[1] + amt
#   }
# }
#
# row <- if (.x[7] == "F") rng[1] else rng[2]
#
# rng <- c(0, 7)
#
# for (part in .x[7:10]) {
#   amt <- floor((rng[2] - rng[1])/2) + 1
#   if (part == "L") {
#     rng[2] <- rng[2] - amt
#   } else {
#     rng[1] <- rng[1] + amt
#   }
# }
#
# seat <- if (.x[10] == "R") rng[1] else rng[2]
#
# (row * 8) + seat
}) %>%
sort() -> seats
input <- readLines("../input/05-01.txt")
partition <- function(seq, lb, ub, trigger) {
for (part in seq) {
amt <- floor((ub - lb)/2) + 1
if (part == "F") {
ub <- ub - amt
} else {
lb <- lb + amt
}
return(if (tail(seq, 1) == trigger) lb else ub)
}
strsplit(input, "") %>%
map_dbl(~{
return(
(partition(.x[1:7], 0, 127, "F") * 8) +
partition(.x[7:10], 0, 7, "L")
)
# rng <- c(0, 127)
#
# for (part in .x[1:7]) {
#   amt <- floor((rng[2] - rng[1])/2) + 1
#   if (part == "F") {
#     rng[2] <- rng[2] - amt
#   } else {
#     rng[1] <- rng[1] + amt
#   }
# }
#
# row <- if (.x[7] == "F") rng[1] else rng[2]
#
# rng <- c(0, 7)
#
# for (part in .x[7:10]) {
#   amt <- floor((rng[2] - rng[1])/2) + 1
#   if (part == "L") {
#     rng[2] <- rng[2] - amt
#   } else {
#     rng[1] <- rng[1] + amt
#   }
# }
#
# seat <- if (.x[10] == "R") rng[1] else rng[2]
#
# (row * 8) + seat
}) %>%
sort() -> seats
max(seats)
seats[which(diff(c(seats[1], seats)) > 1)] - 1
seats
input <- readLines("../input/05-01.txt")
partition <- function(seq, lb, ub, trigger) {
for (part in seq) {
amt <- floor((ub - lb)/2) + 1
if (part == "F") {
ub <- ub - amt
} else {
lb <- lb + amt
}
return(if (tail(seq, 1) == trigger) ub else lb)
}
strsplit(input, "") %>%
map_dbl(~{
return(
(partition(.x[1:7], 0, 127, "F") * 8) +
partition(.x[7:10], 0, 7, "L")
)
# rng <- c(0, 127)
#
# for (part in .x[1:7]) {
#   amt <- floor((rng[2] - rng[1])/2) + 1
#   if (part == "F") {
#     rng[2] <- rng[2] - amt
#   } else {
#     rng[1] <- rng[1] + amt
#   }
# }
#
# row <- if (.x[7] == "F") rng[1] else rng[2]
#
# rng <- c(0, 7)
#
# for (part in .x[7:10]) {
#   amt <- floor((rng[2] - rng[1])/2) + 1
#   if (part == "L") {
#     rng[2] <- rng[2] - amt
#   } else {
#     rng[1] <- rng[1] + amt
#   }
# }
#
# seat <- if (.x[10] == "R") rng[1] else rng[2]
#
# (row * 8) + seat
}) %>%
sort() -> seats
max(seats)
seats[which(diff(c(seats[1], seats)) > 1)] - 1
input <- readLines("../input/05-01.txt")
partition <- function(seq, lb, ub, trigger) {
for (part in seq) {
amt <- floor((ub - lb)/2) + 1
if (part == trigger) {
ub <- ub - amt
} else {
lb <- lb + amt
}
return(if (tail(seq, 1) == trigger) ub else lb)
}
strsplit(input, "") %>%
map_dbl(~{
return(
(partition(.x[1:7], 0, 127, "F") * 8) +
partition(.x[7:10], 0, 7, "L")
)
# rng <- c(0, 127)
#
# for (part in .x[1:7]) {
#   amt <- floor((rng[2] - rng[1])/2) + 1
#   if (part == "F") {
#     rng[2] <- rng[2] - amt
#   } else {
#     rng[1] <- rng[1] + amt
#   }
# }
#
# row <- if (.x[7] == "F") rng[1] else rng[2]
#
# rng <- c(0, 7)
#
# for (part in .x[7:10]) {
#   amt <- floor((rng[2] - rng[1])/2) + 1
#   if (part == "L") {
#     rng[2] <- rng[2] - amt
#   } else {
#     rng[1] <- rng[1] + amt
#   }
# }
#
# seat <- if (.x[10] == "R") rng[1] else rng[2]
#
# (row * 8) + seat
}) %>%
sort() -> seats
max(seats)
seats[which(diff(c(seats[1], seats)) > 1)] - 1
partition <- function(seq, lb, ub, trigger) {
for (part in seq) {
amt <- floor((ub - lb)/2) + 1
if (part == trigger) {
ub <- ub - amt
} else {
lb <- lb + amt
}
return(if (tail(seq, 1) == trigger) ub else lb)
}
strsplit(input, "") %>%
map_dbl(~{
return(
(partition(.x[1:7], 0, 127, "F") * 8) +
partition(.x[8:10], 0, 7, "L")
)
# rng <- c(0, 127)
#
# for (part in .x[1:7]) {
#   amt <- floor((rng[2] - rng[1])/2) + 1
#   if (part == "F") {
#     rng[2] <- rng[2] - amt
#   } else {
#     rng[1] <- rng[1] + amt
#   }
# }
#
# row <- if (.x[7] == "F") rng[1] else rng[2]
#
# rng <- c(0, 7)
#
# for (part in .x[7:10]) {
#   amt <- floor((rng[2] - rng[1])/2) + 1
#   if (part == "L") {
#     rng[2] <- rng[2] - amt
#   } else {
#     rng[1] <- rng[1] + amt
#   }
# }
#
# seat <- if (.x[10] == "R") rng[1] else rng[2]
#
# (row * 8) + seat
}) %>%
sort() -> seats
max(seats)
seats[which(diff(c(seats[1], seats)) > 1)] - 1
library(tidyverse)
input <- readLines("../input/05-01.txt")
partition <- function(seq, lb, ub, trigger) {
for (part in seq) {
amt <- floor((ub - lb)/2) + 1
if (part == trigger) {
ub <- ub - amt
} else {
lb <- lb + amt
}
return(if (tail(seq, 1) == trigger) ub else lb)
}
strsplit(input, "") %>%
map_dbl(~{
(partition(.x[1:7], 0, 127, "F") * 8) + partition(.x[8:10], 0, 7, "L")
}) %>%
sort() -> seats
max(seats)
seats[which(diff(c(seats)) > 1)] + 1
seats[which(diff(c(seats[1], seats)) > 1)] - 1
reticulate::repl_python()
import math
reticulate::repl_python()
import math
seats[which(diff(c(seats)) > 1)] + 1
reticulate::repl_python()
import math
reticulate::repl_python()
input <- readLines("/tmp/test.txt")
input
split(input, findInterval(1:length(input), which(input == "")))
split(input, findInterval(1:length(input), which(input == ""))) %>%
map(filter, `!=` "")
split(input, findInterval(1:length(input), which(input == ""))) %>%
map(filter, `!=`, "")
library(stringi)
library(tidyverse)
split(input, findInterval(1:length(input), which(input == ""))) %>%
map(filter, `!=`, "")
library(magrittr)
split(input, findInterval(1:length(input), which(input == ""))) %>%
map(keep, equals, "")
split(input, findInterval(1:length(input), which(input == ""))) %>%
map(discard, equals, "")
split(input, findInterval(1:length(input), which(input == ""))) %>%
# map(discard, equals, "") %>%
map(~{
unlist(strsplit(.x, ""))
})
split(input, findInterval(1:length(input), which(input == ""))) %>%
# map(discard, equals, "") %>%
map(~{
length(unique(unlist(strsplit(.x, ""))))
})
split(input, findInterval(1:length(input), which(input == ""))) %>%
# map(discard, equals, "") %>%
map_int(~{
length(unique(unlist(strsplit(.x, ""))))
}) %>%
sum()
split(input, findInterval(1:length(input), which(input == ""))) %>%
map_int(~length(unique(unlist(strsplit(.x, ""))))) %>%
sum()
# input <- readLines("/tmp/test.txt")
input <- readLines("../input/06-01.txt")
# input <- readLines("/tmp/test.txt")
input <- readLines("../input/06-01.txt", warn = FALSE)
split(input, findInterval(1:length(input), which(input == ""))) %>%
map_int(~length(unique(unlist(strsplit(.x, ""))))) %>%
sum()
split(input, findInterval(1:length(input), which(input == ""))) %>%
map_int(~{
table(unlist(strsplit(.x, "")))
})
split(input, findInterval(1:length(input), which(input == ""))) %>%
map_(~{
table(unlist(strsplit(.x, "")))
})
split(input, findInterval(1:length(input), which(input == ""))) %>%
map(~{
table(unlist(strsplit(.x, "")))
})
input <- readLines("/tmp/test.txt")
split(input, findInterval(1:length(input), which(input == ""))) %>%
map(~{
table(unlist(strsplit(.x, "")))
})
split(input, findInterval(1:length(input), which(input == ""))) %>%
map(discard, equals, "") %>%
map(~{
n <- length(.x)
table(unlist(strsplit(.x, ""))) == n
})
split(input, findInterval(1:length(input), which(input == ""))) %>%
map(discard, equals, "") %>%
map(~{
n <- length(.x)
sum(table(unlist(strsplit(.x, ""))) == n)
})
split(input, findInterval(1:length(input), which(input == ""))) %>%
map(discard, equals, "") %>%
map_int(~{
sum(table(unlist(strsplit(.x, ""))) == length(.x))
}) %>%
sum()
split(input, findInterval(1:length(input), which(input == ""))) %>%
map_int(~length(unique(unlist(strsplit(.x, ""))))) %>%
sum()
# input <- readLines("/tmp/test.txt")
input <- readLines("../input/06-01.txt", warn = FALSE)
split(input, findInterval(1:length(input), which(input == ""))) %>%
map(discard, equals, "") %>%
map_int(~{
sum(table(unlist(strsplit(.x, ""))) == length(.x))
}) %>%
sum()
reticulate::repl_python()
